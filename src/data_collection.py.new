import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import ta

class StockDataCollector:
    def __init__(self, symbol):
        self.symbol = symbol
        self.stock = yf.Ticker(symbol)

    def get_historical_data(self, period='1y', interval='15m'):
        """
        Fetch historical data and add technical indicators
        """
        df = self.stock.history(period=period, interval=interval)
        
        # Add technical indicators
        df = self.add_technical_indicators(df)
        
        # Clean data
        df = df.dropna()
        return df

    def add_technical_indicators(self, df):
        """
        Add technical indicators for better prediction
        """
        try:
            # RSI with multiple timeframes
            df['RSI'] = ta.momentum.rsi(df['Close'])
            df['RSI_3'] = ta.momentum.rsi(df['Close'], window=3)
            df['RSI_14'] = ta.momentum.rsi(df['Close'], window=14)
            
            # MACD
            macd = ta.trend.MACD(df['Close'])
            df['MACD'] = macd.macd()
            df['MACD_signal'] = macd.macd_signal()
            df['MACD_diff'] = macd.macd_diff()
            
            # Bollinger Bands
            bb = ta.volatility.BollingerBands(df['Close'])
            df['BB_upper'] = bb.bollinger_hband()
            df['BB_middle'] = bb.bollinger_mavg()
            df['BB_lower'] = bb.bollinger_lband()
            df['BB_width'] = (df['BB_upper'] - df['BB_lower']) / df['BB_middle']
            
            # Moving Averages with multiple timeframes
            for window in [5, 8, 13, 21, 34, 55]:  # Fibonacci sequence
                df[f'SMA_{window}'] = ta.trend.sma_indicator(df['Close'], window=window)
                df[f'EMA_{window}'] = ta.trend.ema_indicator(df['Close'], window=window)
            
            # Volume indicators
            df['Volume_EMA'] = ta.trend.ema_indicator(df['Volume'], window=20)
            df['Volume_SMA'] = ta.trend.sma_indicator(df['Volume'], window=20)
            df['Volume_VWAP'] = (df['Close'] * df['Volume']).cumsum() / df['Volume'].cumsum()
            
            # Momentum indicators
            df['MFI'] = ta.volume.money_flow_index(df['High'], df['Low'], df['Close'], df['Volume'])
            df['ADX'] = ta.trend.adx(df['High'], df['Low'], df['Close'])
            
            # Volatility
            df['ATR'] = ta.volatility.average_true_range(df['High'], df['Low'], df['Close'])
            
            # Price channels
            df['Highest_high'] = df['High'].rolling(window=20).max()
            df['Lowest_low'] = df['Low'].rolling(window=20).min()
            
            # Price change features
            df['Returns'] = df['Close'].pct_change()
            df['Log_Returns'] = np.log(df['Close']).diff()
            
            # Target variable (future returns)
            df['Target'] = df['Returns'].shift(-1)  # Next period's return
            
        except Exception as e:
            print(f"Error adding technical indicators: {e}")
            
        return df

    def get_live_data(self):
        """
        Get the most recent data point
        """
        data = self.stock.history(period='1d', interval='1m')
        if not data.empty:
            live_data = data.iloc[-1].copy()
            # Add technical indicators for the live data
            live_data_df = pd.DataFrame([live_data])
            live_data_df = self.add_technical_indicators(live_data_df)
            return live_data_df.iloc[0]
        return None
